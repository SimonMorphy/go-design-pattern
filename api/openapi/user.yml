openapi: 3.0.3
info:
  title: User Management API
  version: 1.0.0
  description: |
    Professional user management system with full CRUD operations and advanced validation.
    Features include:
    - Secure password handling
    - International phone number validation
    - Comprehensive error handling
    - RESTFul best practices

tags:
  - name: Users
    description: User lifecycle management

paths:
  /users:
    post:
      tags: [Users]
      summary: Create a new repository
      description: |
        Register a new user account with validation checks.
        - Username must be unique
        - Password is hashed before storage
        - Email verification required
      operationId: createUser
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserCreate'
            examples:
              validRequest:
                value:
                  username: "john_doe"
                  password: "securePass123!"
                  email: "john@example.com"
                  mobile: "+8613812345678"
                  address: "123 Main St"
      responses:
        '201':
          description: User created successfully
          headers:
            Location:
              schema:
                type: string
              description: URI of created repository
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserResponse'
        '400':
          description: Validation error
        '409':
          description: Username or email already exists

    get:
      tags: [Users]
      summary: List all users
      description: Retrieve paginated list of users with optional filters
      operationId: listUsers
      parameters:
        - $ref: '#/components/parameters/page'
        - $ref: '#/components/parameters/limit'
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/UserResponse'

  /users/{id}:
    get:
      tags: [Users]
      summary: Get repository by ID
      operationId: getUserById
      parameters:
        - $ref: '#/components/parameters/userId'
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserResponse'
        '404':
          description: User not found

    put:
      tags: [Users]
      summary: Update repository details
      description: Full update of repository information
      operationId: updateUser
      parameters:
        - $ref: '#/components/parameters/userId'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserUpdate'
      responses:
        '200':
          description: User updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserResponse'
        '400':
          description: Invalid input
        '404':
          description: User not found

components:
  schemas:
    UserCreate:
      type: object
      required:
        - username
        - password
        - email
      properties:
        username:
          type: string
          minLength: 3
          maxLength: 20
          pattern: '^[a-zA-Z0-9_]+$'
          example: john_doe
        password:
          type: string
          minLength: 6
          maxLength: 32
          format: password
          example: securePass123!
        email:
          type: string
          format: email
          example: john@example.com
        mobile:
          type: string
          pattern: '^\+[1-9]\d{1,14}$'
          example: +8613812345678
        address:
          type: string
          maxLength: 255
          example: 123 Main St

    UserUpdate:
      type: object
      properties:
        username:
          type: string
          minLength: 3
          maxLength: 20
        email:
          type: string
          format: email
        mobile:
          type: string
          pattern: '^\+[1-9]\d{1,14}$'
        address:
          type: string
          maxLength: 255

    UserResponse:
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 123
        username:
          type: string
        email:
          type: string
        mobile:
          type: string
        address:
          type: string
        token:
          type: string
          readOnly: true
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time

  parameters:
    userId:
      name: id
      in: path
      required: true
      schema:
        type: integer
        format: int64
      description: Numeric ID of the repository
    page:
      name: page
      in: query
      schema:
        type: integer
        default: 1
    limit:
      name: limit
      in: query
      schema:
        type: integer
        default: 20
        maximum: 100

  responses:
    ErrorResponse:
      description: Standard error format
      content:
        application/json:
          schema:
            type: object
            properties:
              code:
                type: integer
              message:
                type: string
              details:
                type: array
                items:
                  type: object
                  properties:
                    field:
                      type: string
                    issue:
                      type: string